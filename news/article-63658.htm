<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://sing-box-node.github.io/news/article-63658.htm" />
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>线程同步安全问题及其解决</title>
        <meta name="description" content="线程同步  卖票案例   案例需求 某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票   实现步骤  定义一个类SellTicket实现Runnable" />
        <link rel="icon" href="/assets/website/img/sing_box_node/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Singbox Node机场订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://sing-box-node.github.io/news/article-63658.htm" />
    <meta property="og:site_name" content="Singbox Node机场订阅官网" />
    <meta property="og:title" content="线程同步安全问题及其解决" />
    <meta property="og:image" content="https://sing-box-node.github.io/uploads/20240825-1/368caffbf1616e5828ab6c4f9c7249bd.webp" />
        <meta property="og:release_date" content="2025-02-26T08:36:51" />
    <meta property="og:updated_time" content="2025-02-26T08:36:51" />
        <meta property="og:description" content="线程同步  卖票案例   案例需求 某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票   实现步骤  定义一个类SellTicket实现Runnable" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="线程同步安全问题及其解决">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Web Font -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap" rel="stylesheet">
    <!-- ========================= CSS here ========================= -->
    <link rel="stylesheet" href="/assets/website/css/sing_box_node/bootstrap.min.css" />
    <link rel="stylesheet" href="/assets/website/css/sing_box_node/LineIcons.2.0.css" />
    <link rel="stylesheet" href="/assets/website/css/sing_box_node/animate.css" />
    <link rel="stylesheet" href="/assets/website/css/sing_box_node/tiny-slider.css" />
    <link rel="stylesheet" href="/assets/website/css/sing_box_node/glightbox.min.css" />
    <link rel="stylesheet" href="/assets/website/css/sing_box_node/main.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-51ZXJ2Q5DQ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-51ZXJ2Q5DQ');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
    
</head>

<body data-page="detail">
        <div class="preloader">
        <div class="preloader-inner">
            <div class="preloader-icon">
                <span></span>
                <span></span>
            </div>
        </div>
    </div>
    <!-- /End Preloader -->
    <!-- Start Header Area -->
    <header class="header navbar-area">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-12">
                    <div class="nav-inner">
                        <!-- Start Navbar -->
                        <nav class="navbar navbar-expand-lg">
                            <a class="navbar-brand" href="/">
                                                        <span>Singbox Node</span>
                                                        </a>
                            <button class="navbar-toggler mobile-menu-btn" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                            </button>
                            <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent">
                                <ul id="nav" class="navbar-nav ms-auto">
                                                                        <li class="nav-item">
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li class="nav-item">
                                        <a href="/free-nodes/">免费节点</a>
                                    </li>
                                                                        <li class="nav-item">
                                        <a href="/paid-subscribe/">推荐机场</a>
                                    </li>
                                                                        <li class="nav-item">
                                        <a href="/client.htm">客户端</a>
                                    </li>
                                                                        <li class="nav-item">
                                        <a href="/news/">新闻资讯</a>
                                    </li>
                                                                    </ul>
                            </div> <!-- navbar collapse -->
                        </nav>
                        <!-- End Navbar -->
                    </div>
                </div>
            </div> <!-- row -->
        </div> <!-- container -->
    </header>
    <!-- End Header Area -->
    <!-- Start Breadcrumbs -->
    <div class="breadcrumbs overlay">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-8 offset-lg-2 col-md-12 col-12">
                    <div class="breadcrumbs-content">
                        <h1 class="page-title">线程同步安全问题及其解决</h1>
                    </div>
                    <ul class="breadcrumb-nav">
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumbs -->
    <!-- Start Departments  Area -->
    <section class="departments section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2> <a id="_0" rel="nofollow"></a>线程同步</h2> <h3> <a id="_2" rel="nofollow"></a>卖票案例</h3> <ul> <li> <p>案例需求</p> <p>某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票</p> </li> <li> <p>实现步骤</p> <ul> <li>定义一个类SellTicket实现Runnable接口，里面定义一个成员变量：private int tickets = 100;</li> <li>在SellTicket类中重写run()方法实现卖票，代码步骤如下</li> <li>判断票数大于0，就卖票，并告知是哪个窗口卖的</li> <li>卖了票之后，总票数要减1</li> <li>票卖没了，线程停止</li> <li>定义一个测试类SellTicketDemo，里面有main方法，代码步骤如下</li> <li>创建SellTicket类的对象</li> <li>创建三个Thread类的对象，把SellTicket对象作为构造方法的参数，并给出对应的窗口名称</li> <li>启动线程</li> </ul> </li> <li> <p>代码实现</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">//票的数量</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                              <span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     <span class="token comment">//卖完了</span>                     <span class="token keyword">break</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>                     <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>                         Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     ticket<span class="token operator">--</span><span class="token punctuation">;</span>                     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"在卖票,还剩下"</span> <span class="token operator">+</span> ticket <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>          t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>运行结果出现了重复票，负号票问题：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230117/c76bc96913778101eff6f5f003481bee.jpg" alt="线程同步安全问题及其解决"></p> </li> </ul> <h3> <a id="_70" rel="nofollow"></a>线程安全问题-原因分析</h3> <p>1.卖票出现了问题</p> <ul> <li> <p>相同的票出现了多次</p> </li> <li> <p>出现了负数的票</p> </li> </ul> <p>2.问题产生原因</p> <p>线程执行的随机性导致的,可能在卖票过程中丢失cpu的执行权,导致出现问题</p> <h3> <a id="_82" rel="nofollow"></a>同步代码块解决数据安全问题</h3> <p>1.安全问题出现的条件</p> <ul> <li>是多线程环境</li> <li>有共享数据（哪些数据会被共享，哪些数据不会被共享？）</li> </ul> <p> **会被共享的数据:**在Java中，所有实例域(对象的字段)、静态域(静态字段)和数组元素都存储在堆内存中，堆内存在线程之间共享</p> <p> **哪些数据不会被共享:**局部变量（Local Variables），方法定义参数（局部变量（Local Variables）和异常处理器参数（ExceptionHandler Parameters）不会在线程之间共享）</p> <ul> <li>有多条语句操作共享数据</li> </ul> <p>2.卖票问题出现的原因(回顾)?如何解决呢?</p> <p>线程的随机执行。如何解决呢？控制不同线程间操作发生相对顺序的机制<strong>线程同步</strong></p> <p>3.如何实现线程同步呢？</p> <ul> <li>把多条语句操作共享数据的代码给锁起来，让任意时刻只能有一个线程执行即可</li> <li>Java提供了同步代码块的方式来解决</li> </ul> <p>同步代码块格式：</p> <pre><code class="prism language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>任意对象<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>  	多条语句操作共享数据的代码  <span class="token punctuation">}</span> </code></pre> <p>synchronized(任意对象)：就相当于给代码加锁了，任意对象就可以看成是一把锁</p> <p>4.synchronized同步代码块的特点？</p> <p>默认情况下是打开的，只要有一个线程进去执行代码了，锁就会关闭</p> <p>当线程执行完出来时，锁才会自动打开</p> <p>代码演示</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">//票的数量</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//多个线程必须使用同一把锁.</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     <span class="token comment">//卖完了</span>                     <span class="token keyword">break</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>                     <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>                         Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     ticket<span class="token operator">--</span><span class="token punctuation">;</span>                     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"在卖票,还剩下"</span> <span class="token operator">+</span> ticket <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>          t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>5.同步的好处和弊端</p> <ul> <li>好处：解决了多线程的数据安全问题</li> <li>弊端：当线程很多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率</li> </ul> <h3> <a id="_169" rel="nofollow"></a>同步方法解决数据安全问题</h3> <p>1.同步方法的格式</p> <p>同步方法：就是把synchronized关键字加到方法上</p> <pre><code class="prism language-java">修饰符 <span class="token keyword">synchronized</span> 返回值类型 方法名<span class="token punctuation">(</span>方法参数<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>  	方法体； <span class="token punctuation">}</span> </code></pre> <p>2.同步方法的锁对象是什么呢?</p> <pre><code>	this </code></pre> <p>3.静态同步方法的格式</p> <p> 同步静态方法：就是把synchronized关键字加到静态方法上</p> <pre><code class="prism language-java">修饰符 <span class="token keyword">static</span> <span class="token keyword">synchronized</span> 返回值类型 方法名<span class="token punctuation">(</span>方法参数<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>  	方法体； <span class="token punctuation">}</span> </code></pre> <p>4.同步静态方法的锁对象是什么呢?</p> <pre><code>	类名.class </code></pre> <p>代码演示</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticketCount <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 <span class="token comment">//同步方法，锁对象为类名.class</span>                 <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">synchronizedMthod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     <span class="token keyword">break</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>              <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 <span class="token comment">//同步代码块，这里设置为类名.class就是为了验证同步方法的锁对象为类名.class</span>                 <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>MyRunnable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>ticketCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>                         <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>                             Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>                         ticketCount<span class="token operator">--</span><span class="token punctuation">;</span>                         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"在卖票,还剩下"</span> <span class="token operator">+</span> ticketCount <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>          <span class="token punctuation">}</span>     <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">synchronizedMthod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">if</span><span class="token punctuation">(</span>ticketCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>             <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>                 Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             ticketCount<span class="token operator">--</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"在卖票,还剩下"</span> <span class="token operator">+</span> ticketCount <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         MyRunnable mr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mr<span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mr<span class="token punctuation">)</span><span class="token punctuation">;</span>         t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="Lock_263" rel="nofollow"></a>Lock锁</h3> <p>1.如何手动开关锁呢？</p> <pre><code>使用lock </code></pre> <p>2.如何使用Lock？</p> <pre><code>Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来实例化 </code></pre> <p> ReentrantLock构造方法</p> <table> <thead> <tr> <th>方法名</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>ReentrantLock()</td> <td>创建一个ReentrantLock的实例</td> </tr> </tbody> </table> <p> 加锁解锁方法</p> <table> <thead> <tr> <th>方法名</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>void lock()</td> <td>获得锁</td> </tr> <tr> <td>boolean tryLock()</td> <td>尝试获得锁</td> </tr> <tr> <td>void unlock()</td> <td>释放锁</td> </tr> </tbody> </table> <p>代码演示</p> <pre><code class="prism language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">//票的数量</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token comment">//synchronized (obj){//多个线程必须使用同一把锁.</span>             <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>                 lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                     <span class="token comment">//卖完了</span>                     <span class="token keyword">break</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>                     Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     ticket<span class="token operator">--</span><span class="token punctuation">;</span>                     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"在卖票,还剩下"</span> <span class="token operator">+</span> ticket <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{<!-- --></span>                 lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token comment">// }</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>         t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>3.synchronized与Lock的区别</p> <table> <thead> <tr> <th><strong>synchronized</strong></th> <th><strong>Lock</strong></th> </tr> </thead> <tbody> <tr> <td>Java的关键字，在jvm层面上</td> <td>是一个类</td> </tr> <tr> <td>1、以获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁</td> <td>在finally中必须释放锁，不然容易造成线程死锁</td> </tr> <tr> <td>假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待</td> <td>分情况而定，Lock有多个锁获取的方式，具体下面会说道，大致就是可以尝试获得锁，线程可以不用一直等待</td> </tr> <tr> <td>锁的细粒度和灵活度低</td> <td>锁的细粒度和灵活度高</td> </tr> </tbody> </table> <p>4.如何选择？</p> <p>除非synchronized不满足需要时，才选择Lock</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-63061.htm">动物医疗机构的主管部门（动物医疗机构的主管部门是哪里）</a></p>
                                        <p>下一个：<a href="/news/article-63659.htm">动物免疫接种实验原理 动物免疫接种实验原理是什么</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-48163.htm" title="jackson   json对象、实体类相互转换">jackson   json对象、实体类相互转换</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-20-node-share-links.htm" title="「2月20日」最高速度19.8M/S，2025年Singbox Node每天更新免费机场订阅节点链接">「2月20日」最高速度19.8M/S，2025年Singbox Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-19-free-high-speed-nodes.htm" title="「11月19日」最高速度20.4M/S，2024年Singbox Node每天更新免费机场订阅节点链接">「11月19日」最高速度20.4M/S，2024年Singbox Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-22686.htm" title="SpringBoot深入浅出系列集成Elasticsearch">SpringBoot深入浅出系列集成Elasticsearch</a></li>
                        <li class="py-2"><a href="/news/article-26371.htm" title="SpringBoot实现动态定时任务">SpringBoot实现动态定时任务</a></li>
                        <li class="py-2"><a href="/news/article-49166.htm" title="小白开宠物店需要准备什么东西（开宠物店需要做什么）">小白开宠物店需要准备什么东西（开宠物店需要做什么）</a></li>
                        <li class="py-2"><a href="/news/article-30605.htm" title="宠物领养平台的设计与实现方案怎么写的（领养宠物app的项目策划书）">宠物领养平台的设计与实现方案怎么写的（领养宠物app的项目策划书）</a></li>
                        <li class="py-2"><a href="/news/article-46210.htm" title="动物医院英文怎么写的呀怎么读 动物医院英文怎么写的呀怎么读啊">动物医院英文怎么写的呀怎么读 动物医院英文怎么写的呀怎么读啊</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-16-node-share.htm" title="「1月16日」最高速度20M/S，2025年Singbox Node每天更新免费机场订阅节点链接">「1月16日」最高速度20M/S，2025年Singbox Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-30-node-share-links.htm" title="「11月30日」最高速度21.9M/S，2024年Singbox Node每天更新免费机场订阅节点链接">「11月30日」最高速度21.9M/S，2024年Singbox Node每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- /End Departments  Area -->
        <!-- Start Footer Area -->
    <footer class="footer overlay">
        <!-- Start Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="inner">
                    <div class="row">
                        <div class="col-lg-6 col-md-6 col-12">
                            <div class="content">
                                <p class="copyright-text">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                                Singbox Node机场订阅官网 版权所有
                                <br />
                                Powered by WordPress
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Middle -->
    </footer>
    <!--/ End Footer Area -->
    <!-- ========================= scroll-top ========================= -->
    <a href="#" class="scroll-top">
        <i class="lni lni-chevron-up"></i>
    </a>
    <!-- ========================= JS here ========================= -->
    <script src="/assets/website/js/frontend/sing_box_node/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/sing_box_node/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/sing_box_node/wow.min.js"></script>
    <script src="/assets/website/js/frontend/sing_box_node/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/sing_box_node/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/sing_box_node/count-up.min.js"></script>
    <script src="/assets/website/js/frontend/sing_box_node/imagesloaded.min.js"></script>
    <script src="/assets/website/js/frontend/sing_box_node/isotope.min.js"></script>
    <script src="/assets/website/js/frontend/sing_box_node/main.js"></script>
    <script type="text/javascript">
    //======== Hero Slider
    var slider = new tns({
        container: '.hero-slider',
        slideBy: 'page',
        autoplay: true,
        autoplayButtonOutput: false,
        mouseDrag: true,
        gutter: 0,
        items: 1,
        nav: false,
        controls: true,
        controlsText: [
            '<i class="lni lni-chevron-left"></i>',
            '<i class="lni lni-chevron-right"></i>'
        ],
        responsive: {
            1200: {
                items: 1,
            },
            992: {
                items: 1,
            },
            0: {
                items: 1,
            }

        }
    });
    //========= testimonial 
    tns({
        container: '.testimonial-slider',
        items: 3,
        slideBy: 'page',
        autoplay: false,
        mouseDrag: true,
        gutter: 0,
        nav: true,
        controls: false,
        controlsText: ['<i class="lni lni-arrow-left"></i>', '<i class="lni lni-arrow-right"></i>'],
        responsive: {
            0: {
                items: 1,
            },
            540: {
                items: 1,
            },
            768: {
                items: 2,
            },
            992: {
                items: 2,
            },
            1170: {
                items: 3,
            }
        }
    });

    //====== counter up 
    var cu = new counterUp({
        start: 0,
        duration: 2000,
        intvalues: true,
        interval: 100,
        append: " ",
    });
    cu.start();
    //========= glightbox
    GLightbox({
        'href': '#',
        'type': 'video',
        'source': 'youtube', //vimeo, youtube or local
        'width': 900,
        'autoplayVideos': true,
    });
    //============== isotope masonry js with imagesloaded
    imagesLoaded('#container', function() {
        var elem = document.querySelector('.grid');
        var iso = new Isotope(elem, {
            // options
            itemSelector: '.grid-item',
            masonry: {
                // use outer width of grid-sizer for columnWidth
                columnWidth: '.grid-item'
            }
        });

        let filterButtons = document.querySelectorAll('.portfolio-btn-wrapper button');
        filterButtons.forEach(e =>
            e.addEventListener('click', () => {

                let filterValue = event.target.getAttribute('data-filter');
                iso.arrange({
                    filter: filterValue
                });
            })
        );
    });
    </script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>